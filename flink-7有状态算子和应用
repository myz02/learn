--实现状态函数
--在runtimecontext中声明键值分区状态
    状态原语主要分：valueState、ListState、MapState、ReducingState、AggregatingState
    主要是在rich函数中open方法进行初始化
    ```private ValueState<Integer> valueState;
       valueState = getRuntimeContext().getState(new ValueStateDescriptor<>("value", Integer.class));
    状态引用对象只提供用于状态访问的接口，而不会存储状态本身，具体保存工作由状态后端来完成
    
--接收检查点完成通知
    实现CheckpointListener接口，notifyCheckpointAborted(long checkpointId)方法会在jobmanager将检查点注册为已完成时调用
    flink不保证每个完成的检查点都会调用到这个方法

--状态的故障恢复
    ```env.enableCheckpointing(100000L);//开启checkpoint
    检查点间隔时间太小，频繁的checkpoint会造成较大的开销，但是恢复的数据量较小，恢复速度会更快
    
--状态的维护
    能够将状态迁移到一个新版本或者重新分配到不同数量的算子
    flink利用保存点机制对状态进行维护，需要在初始版本指定好两个参数：算子唯一表示和最大并行度(只针对键值分区状态的算子)
    唯一标识和最大并行度会固化到保存点，不可更改，如果新版本两个参数发生变化，就无法从之前的保存点启动，就会丢弃状态从头开始运行。

--指定算子唯一标识
    标识会将保存点中的状态映射到应用对应的算子，只有应用和保存点中的算子标识一样，状态才能顺利恢复。
    ```source.map(null).uid("testUid");
    
--算子最大并行度
    ```env.setMaxParallelism(512);
    ```source.map(null).uid("testUid").setMaxParallelism(1024);
    算子的默认最大并行度取决于应用首个版本中算子的并行度，如果并行度小于等于128，则最大并行度会设置为128，大于128另说
    
--性能和鲁棒性
    --状态后端的选择
        主要有三种状态后端：emoryStateBackend, FsStateBackend, RocksDBStateBackend
         emoryStateBackend: 以常规对象的形式存储在taskmanager的JVM的堆中，如果状态变得很大，所在的JVM可能会连同运行在该JVM上的任务都OOM而终止
                                生成检查点时，会将状态发送到jobmanager并保存到它的堆内存中。
         FsStateBackend：和内存状态后端一样保存在JVM的堆中，但是生成检查点的时候不会存储到jobmanager中，而是会写入到远程持久化文件系统中。
         RocksDBStateBackend：把状态存储到rocksdb实例中，将数据保存到磁盘中，需要对数据进行序列化和反序列化，检查点写入远程持久化文件系统，
                                且支持增量检查点，对于大状态是非常好的选择。
         ```env.setStateBackend(new FsStateBackend("hdfs//...."));   //配置状态后端
         
    --状态原语的选择
        ValueState在更新和访问的时候分别进行完整的序列化和反序列化，ListState会将所有列表头目进行反序列化，但向ListState中添加一个值，
            会将其附加到最后的操作会更轻量化，因为只会序列化新添加的值。
        MapState只对读写的键和值进行(反)序列化，遍历的时候会先取出其中的所有序列化好的条目，访问才会反序列化具体的条目。
        总之：ListState效率大于ValueState(List) ， MapState效率大于ValueState(HashMap)
    
    --定时器删除状态
        ```long time = context.timerService().currentProcessingTime() + 1000L;
           context.timerService().registerProcessingTimeTimer(time); //创建定时器
           context.timerService().deleteProcessingTimeTimer(time);   //删除定时器
        定时器到时见了就会调用onTimer方法，onTimer方法，内部逻辑就是定时器到了之后执行的操作。
        目前定时器支持eventtime和processtime
        
--更新有状态应用
       生成保存点，停止应用，重启新版本
       更新有状态应用分三种情况：添加有状态或无状态算子、应用中移除某个状态、改变状态语义或者修改算子类型
       --移除某个状态
            flink默认情况下，不允许无法将保存点的状态进行恢复的应用启动，但是可以禁用这一安全检查。
        --修改算子状态
            假设将valuestate从string改成double，状态存储需要序列化，那使用doubleser..反序列化stringser...序列化的数据会失败。
            如果数据类型为avro类型，就可以，新版本的不了解

--可查询式状态
        将状态和其它应用共享
    --查询式服务架构
        pass
    --暴露可查询状态
        ```ValueStateDescriptor<Integer> descriptor = new ValueStateDescriptor<>("value", Integer.class);
           descriptor.setQueryable("lastTemperature");  //／启用可询式状态并设其外标识符
    --从外部系统查询状态
        pass
       
        
        
        
        
