--应用的一致性保障
 flink可以通过检查点保证应用内部的一致性，但是无法保证端到端的一致性保证，如果应用恢复最新一次检查点，那检查点之后处理的事件就可能重复处理
  --幂等性写
      多次操作但是只产生一次结果，同样的key插入MySQL，MySQL要求主键唯一，所以后续的同样key插入操作都会失败
  --事务性写
      基本思路就是，上次成功的检查点的事件才会被写入。
      flink提供了两个构件来实现数据汇连接器，一个通用的WAL数据汇和一个2PC数据汇
      --wal数据汇
          会将所有的数据提交到应用状态，在收到检查点通知后将它们发送到数据汇系统，无法保证100%精准一次性，接收系统需要处理一次次波峰式写入
      --2PC数据汇
          需要接收系统支持事务或提供可用来模拟事务的构件。
          每次生成检查点，会开启一次事务并将收到的事件附加到事务中，将收集到的事件写入到接收系统，但是不提交事务，等收到检查点完成通知再去提交事务
          
--自定义数据源函数
 --flink提供了两个接口和对应的富函数接口
     SourceFunction和RichSourceFunction用于定义非并行的数据源连接器，只能以单任务运行
     ParallelSourceFunction和RichParallelSourceFunction定义能够同时运行多个任务示例的数据源连接器
     都提供了open() close() run() cancel()
     run()负责执行具体的任务读取或接收工作  它会将这些记录传入到flink应用中，根据上游不同的系统，数据可能以推或拉的形式获取。
      run()只会在flink中调用一次，后者会专门为它开一个线程，该线程会不断循环读取或接收数据源的数据并发出。
     cancel()会在应用关闭时调用，run()方法会在cancel调用后立即终止。
          
          
